import{_ as n,F as p,g as l,K as e,h as a,l as s,ar as t,o as h}from"./chunks/framework.VlluEs-f.js";const U=JSON.parse('{"title":"35中介者模式：如何通过中间层来解决耦合过多的问题？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/趣学设计模式_文档/(6900) 35  中介者模式：如何通过中间层来解决耦合过多的问题？.md","filePath":"posts/backEnd/趣学设计模式_文档/(6900) 35  中介者模式：如何通过中间层来解决耦合过多的问题？.md","lastUpdated":1718371218000}'),E={name:"posts/backEnd/趣学设计模式_文档/(6900) 35  中介者模式：如何通过中间层来解决耦合过多的问题？.md"},k=s("h1",{id:"_35中介者模式-如何通过中间层来解决耦合过多的问题",tabindex:"-1"},[a("35中介者模式：如何通过中间层来解决耦合过多的问题？ "),s("a",{class:"header-anchor",href:"#_35中介者模式-如何通过中间层来解决耦合过多的问题","aria-label":'Permalink to "35中介者模式：如何通过中间层来解决耦合过多的问题？"'},"​")],-1),r=s("p",null,"中介者模式理解起来并不难，代码实现简单，学习难度也很小，只要合理充分地应用这个模式，往往就能够解决一些意想不到的问题。那这到底是怎样一个模式？多用于什么场景中？为什么使用？该怎么使用？",-1),o=s("p",null,"话不多说，让我们带着这些问题开始今天的学习吧。",-1),d=s("h3",{id:"模式原理分析",tabindex:"-1"},[a("模式原理分析 "),s("a",{class:"header-anchor",href:"#模式原理分析","aria-label":'Permalink to "模式原理分析"'},"​")],-1),c=s("p",null,"中介者模式的原始定义是：中介者对象封装了一组对象之间的交互，这组对象会将它们的交互委托给中介者对象，而不是直接交互。",-1),g=s("p",null,"可以看到，这个定义是难得的简单和明确，中介者对象就是用于处理对象与对象之间的直接交互，封装了多个对象之间的交互细节。",-1),u=s("p",null,"我们还是先来看看中介者模式的 UML 图：",-1),y=t("",39);function m(b,_,v,C,q,M){const i=p("Image");return h(),l("div",null,[k,r,o,d,c,g,u,e(i,{alt:"设计模式35（202179-162249）.jpeg",src:"https://s0.lgstatic.com/i/image6/M01/4C/23/Cgp9HWDoCCOAYZ9-AAGxdIBEJ1E23.jpeg"}),a(),y])}const x=n(E,[["render",m]]);export{U as __pageData,x as default};
