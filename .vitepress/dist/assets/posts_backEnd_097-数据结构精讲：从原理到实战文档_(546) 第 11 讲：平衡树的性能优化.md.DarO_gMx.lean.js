import{_ as i,F as r,g as p,K as a,h as e,ar as n,l as s,o as l}from"./chunks/framework.VlluEs-f.js";const V=JSON.parse('{"title":"第11讲：平衡树的性能优化","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/097-数据结构精讲：从原理到实战文档/(546) 第 11 讲：平衡树的性能优化.md","filePath":"posts/backEnd/097-数据结构精讲：从原理到实战文档/(546) 第 11 讲：平衡树的性能优化.md","lastUpdated":1718371218000}'),o={name:"posts/backEnd/097-数据结构精讲：从原理到实战文档/(546) 第 11 讲：平衡树的性能优化.md"},c=n("",9),h=n("",15),_=s("p",null,"这棵树的高度是 O(log n)，n 是这棵树的节点数量。无论搜索哪个节点，我们最多需要运行上面的 Search() 方法 O(log n)，怎么样？是不是有种逃不出如来佛祖手掌心的感觉。",-1),d=s("br",null,null,-1),g=s("p",null,"再让我们看一个最坏的情况，如果二叉查找树每一个节点都只有一个孩子呢？如图中所示：",-1),u=n("",9),k=n("",27),E=s("p",null,"从上图中可以看到，这样的数据结构其实和数组非常像，数组里的值就保存着 URL 和 1，每次有新用户观看过视频之后，就会将 URL 和 1 加到数组的结尾。在上面的例子中，我们只需要遍历一遍这个数组，然后将不同的 URL 值加起来就可以得到观看的总数，例如 A 的观看总数为 8 次，B 为 3 次，C 为 5 次。",-1),b=s("br",null,null,-1),S=s("p",null,"这其实就是 Log-Structured 结构的本质了，不过细心的你应该可以发现了，这样一个最基本的 Log-Structured 结构，其实在应用里会有很多的问题。比如说，一个数组不可能在内存中无限地增长下去，我们要如何处理呢？如果每次想要知道结果，就必须遍历一遍这样的数组，时间复杂度会非常高，那该怎么优化呢？平衡树是如何被应用在里面的呢？所有这些问题的答案我都会在下一讲中为你讲解。",-1),A=s("br",null,null,-1),T=s("p",null,'OK，这节课就讲到这里啦，下一课时我将分享"LSM 树在 Apache HBase 等存储系统中的应用"，记得按时来听课哈。',-1);function m(y,L,B,f,q,x){const t=r("Image");return l(),p("div",null,[c,a(t,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/62/6F/Cgq2xl4lJxiAQfdjAABNJHaIRGg578.png"}),e(),h,a(t,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/62/6F/CgpOIF4lJxiARTx7AAAs1WYpVu4184.png"}),e(),_,d,g,a(t,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/62/6F/Cgq2xl4lJxiAUwTpAABybInZyxQ334.png"}),e(),u,a(t,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/62/6F/CgpOIF4lJxiAZkIuAAECpEddJJM026.png"}),e(),k,a(t,{alt:"",src:"https://s0.lgstatic.com/i/image3/M01/62/6F/Cgq2xl4lJxiANBoGAADWAJDk3lo640.png"}),e(),E,b,S,A,T])}const I=i(o,[["render",m]]);export{V as __pageData,I as default};
