import{_ as h,F as e,g as l,K as n,h as i,l as s,ar as t,o as p}from"./chunks/framework.VlluEs-f.js";const b=JSON.parse('{"title":"16启动etcd过程中发生了什么？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/etcd 原理与实践_文档/(6410) 16  启动 etcd 过程中发生了什么？.md","filePath":"posts/backEnd/etcd 原理与实践_文档/(6410) 16  启动 etcd 过程中发生了什么？.md","lastUpdated":1718371218000}'),k={name:"posts/backEnd/etcd 原理与实践_文档/(6410) 16  启动 etcd 过程中发生了什么？.md"},r=s("h1",{id:"_16启动etcd过程中发生了什么",tabindex:"-1"},[i("16启动etcd过程中发生了什么？ "),s("a",{class:"header-anchor",href:"#_16启动etcd过程中发生了什么","aria-label":'Permalink to "16启动etcd过程中发生了什么？"'},"​")],-1),E=s("p",null,"etcd 服务端是一个综合的模块，整合了我们前面所讲的 Raft、存储、WAL 等功能。etcd 服务端启动时，需要经过初始化创建 etcdServer 实例，接着依次启动 Raft 和 rafthttp 模块，最后启动 etcd 服务端，实现集群内部通信，此时就可以处理客户端的请求了。这一讲我们就结合源码介绍 etcd 服务端启动的具体实现。",-1),d=s("h3",{id:"etcd-server-启动总览",tabindex:"-1"},[i("etcd Server 启动总览 "),s("a",{class:"header-anchor",href:"#etcd-server-启动总览","aria-label":'Permalink to "etcd Server 启动总览"'},"​")],-1),g=s("p",null,"我们使用分层的方式来描绘 etcd 的架构，etcd 可分为 Client 客户端层、API 网络接口层、etcd Raft 算法层、逻辑层和 etcd 存储层。如下图所示：",-1),c=t("",5),y=t("",66),o=s("p",null,"学习完这一讲，我想给大家留一个问题，你经历过哪些 etcd 启动时的异常场景，又是如何解决的它们呢？欢迎你在留言区和我分享你的经历。下一讲，我们将介绍服务端处理客户端请求的步骤和原理。",-1);function F(A,D,C,f,u,B){const a=e("Image");return p(),l("div",null,[r,E,d,g,n(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image6/M01/1F/69/CioPOWBR2CSAJizEAAA4DvAJkFg782.png"}),i(),c,n(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image6/M00/1F/6C/Cgp9HWBR2C-AQGgaAABQ5Am9QKc164.png"}),i(),y,n(a,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image6/M01/1F/69/CioPOWBR2EmAOOQyAAFlIjNTnK0497.png"}),i(),o])}const m=h(k,[["render",F]]);export{b as __pageData,m as default};
