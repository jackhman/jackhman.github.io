import{_ as k,F as l,g as p,K as i,h as a,ar as h,l as n,o as t}from"./chunks/framework.VlluEs-f.js";const m=JSON.parse('{"title":"10数组排序（上）：如何用JS实现各种数组排序？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/frontEnd/JavaScript 核心原理精讲_文档/(6183) 10  数组排序（上）：如何用 JS 实现各种数组排序？.md","filePath":"posts/frontEnd/JavaScript 核心原理精讲_文档/(6183) 10  数组排序（上）：如何用 JS 实现各种数组排序？.md","lastUpdated":1718371218000}'),E={name:"posts/frontEnd/JavaScript 核心原理精讲_文档/(6183) 10  数组排序（上）：如何用 JS 实现各种数组排序？.md"},e=h("",8),r=h("",8),d=h("",37),g=n("p",null,"其中你可以看到排序相关的时间复杂度和空间复杂度以及稳定性的情况，如果遇到需要自己实现排序的时候，可以根据它们的空间和时间复杂度综合考量，选择最适合的排序方法。",-1),y=n("p",null,"接下来的一讲我们将要分析 JS 的 sort 方法的实现，这一讲作为下节课的基础，我还是希望你能彻底理解上面的代码，从而提升 JavaScript 的编程能力和理解能力。本讲所说的各种排序算法的 JS 实现只是其中的引子，下节课的内容会相对难一些。如果你还是对个别排序算法不理解，可以试着自己多实现几遍，就会发现其中很多细节和你只是看一遍是不一样的。",-1),F=n("p",null,"感谢学习，我们下一讲再见。",-1);function C(c,A,o,D,B,u){const s=l("Image");return t(),p("div",null,[e,i(s,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/94/9D/Ciqc1GAZALGARectAANRfAJPMN8925.png"}),a(),r,i(s,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/94/A8/CgqCHmAZALyAd98RAAE5AoAl_us191.png"}),a(),d,i(s,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image2/M01/0C/93/Cip5yGAZAM-AD3aBAAE-rytK4O4585.png"}),a(),g,y,F])}const v=k(E,[["render",C]]);export{m as __pageData,v as default};
