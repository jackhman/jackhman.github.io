import{_ as l,F as p,g as t,K as n,h as i,l as s,ar as e,o as h}from"./chunks/framework.VlluEs-f.js";const j=JSON.parse('{"title":"第19讲：OAP初始化流程精讲，一眼看透SkyWalkingOAP骨架","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1737) 第19讲：OAP 初始化流程精讲，一眼看透 SkyWalking OAP 骨架.md","filePath":"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1737) 第19讲：OAP 初始化流程精讲，一眼看透 SkyWalking OAP 骨架.md","lastUpdated":1718371218000}'),k={name:"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1737) 第19讲：OAP 初始化流程精讲，一眼看透 SkyWalking OAP 骨架.md"},r=s("h1",{id:"第19讲-oap初始化流程精讲-一眼看透skywalkingoap骨架",tabindex:"-1"},[i("第19讲：OAP初始化流程精讲，一眼看透SkyWalkingOAP骨架 "),s("a",{class:"header-anchor",href:"#第19讲-oap初始化流程精讲-一眼看透skywalkingoap骨架","aria-label":'Permalink to "第19讲：OAP初始化流程精讲，一眼看透SkyWalkingOAP骨架"'},"​")],-1),d=s("p",null,"在前面的课程中，我们重点介绍了 SkyWalking Agent 的工作原理和核心实现，包括 Agent 核心启动流程、插件实现代码增强的核心原理、核心 BootService 实现类的原理、Trace 概念在 SkyWalking 中的落地实现、收发 Trace 数据的核心实现。最后深入介绍了 Tomcat、Dubbo 等常用开源软件的插件实现，以及 toolkit-activation 工具箱的核心原理。",-1),o=s("h4",{id:"oap-架构",tabindex:"-1"},[i("OAP 架构 "),s("a",{class:"header-anchor",href:"#oap-架构","aria-label":'Permalink to "OAP 架构"'},"​")],-1),E=s("p",null,"从本课时开始，我们将开始介绍 SkyWalking OAP 服务。OAP 与 Agent 类似，也采用了微内核架构（Microkernel Architecture），如下图所示。",-1),g=s("p",null,"OAP 使用 ModuleManager（组件管理器）管理多个 Module（组件），一个 Module 可以对应多个 ModuleProvider（组件服务提供者），ModuleProvider 是 Module 底层真正的实现。",-1),y=s("p",null,"在 OAP 服务启动时，一个 Module 只能选择使用一个 ModuleProvider 对外提供服务。一个 ModuleProvider 可能支撑了一个非常复杂的大功能，在一个 ModuleProvider 中，可以包含多个 Service ，一个 Service 实现了一个 ModuleProvider 中的一部分功能，通过将多个 Service 进行组装集成，可以得到 ModuleProvider 的完整功能。",-1),c=s("p",null,"ApplicationConfiguration（应用配置对象） 负责管理整个 OAP 的配置信息，ApplicationConfiguration 中包含多个 ModuleConfiguration(组件配置对象) 。",-1),u=s("p",null,"ModuleConfiguration 负责管理一个 Module 的配置信息，ModuleConfiguration 与 Module 是一一对应关系。ModuleConfiguration 中包含多个 ProviderConfiguration（服务提供者配置对象）。ProviderConfiguration 负责管理一个 ModuleProvider 的配置信息，两者也是一一对应的关系。上面两组对象之间的映射关系，如下图所示：",-1),A=e("",4),F=s("p",null,"application.yml 配置文件中包含了整个 OAP 服务中全部 Module 的配置信息，后面在介绍一个 Module 的时候会展示相应的配置信息。",-1),M=s("p",null,"在 load() 方法中， ApplicationConfigLoader 会创建 ApplicationConfiguration 对象以及相关的 ModuleConfiguration、ProviderConfiguration 对象。ApplicationConfiguration 维护了一个 HashMap<String, ModuleConfiguration> 集合（modules 字段），记录了 Module 名称与相应配置对象。",-1),v=s("p",null,"在 ModuleConfiguration 中只维护了一个 HashMap<String, ProviderConfiguration> 集合（providers 字段）记录了 ModuleProvider 名称与相应配置对象。在 ProviderConfiguration 中只有一个 Properties 集合（properties 字段），存储了 application.yml 中 KV 配置信息。下图所示 core Module 对应的 ModuleConfiguration 以及它下面 default ModuleProvider 对应的 ProviderConfiguration：",-1),C=e("",9),D=e("",3),P=e("",9),m=s("p",null,"除了 ModuleServiceHolder 接口中的这两个关键方法之外，ModuleProvider 中还定义了一些通用的抽象方法：",-1),_=s("ul",null,[s("li",null,[s("strong",null,"name() 方法"),i('：返回当前 ModuleProvider 的名称，该名称在同一个 Module 下是唯一的。例如，StorageModule 负责实现 OAP 的持久化存储功能，Module 名称为 "storage"，具体依赖的底层存储可以是 ElasticSearch、H2 等，分别对应StorageModuleElasticsearchProvider、H2StorageProvider 两个 ModuleProvider 实现类，ModuleProvider 名称分别是 "elasticsearch" 和 "h2"。')]),s("li",null,[s("strong",null,"createConfigBeanIfAbsent() 方法"),i(": 返回当前 ModuleProvider 对应的 ModuleConfig 对象。ModuleConfig 是一个空的抽象类，其实现类都是用于存储配置信息的 Java Bean。下图展示了 OAP 服务中几个核心插件模块对应的 ModuleConfig 实现类：")])],-1),f=s("p",null,"结合 ModuleDefine、ModuleProvider 以及 ModuleConfig，整个存储模块的结构如下：",-1),S=e("",4),B=e("",5),b=s("p",null,"在 BootstrapFlow.makeSequence() 方法中，根据 ModuleProvider 对 Module 依赖关系确定 ModuleProvider 的启动顺序，保证每个 ModuleProvider 启动时，其依赖 Module 的 ModuleProvider 已经启动。上图示例的最终启动顺序如下：",-1),T=s("p",null,"makeSequence() 方法的具体实现是靠四层 for 循环实现的，没有什么高深的算法，这里不展开了。",-1),q=s("h4",{id:"总结",tabindex:"-1"},[i("总结 "),s("a",{class:"header-anchor",href:"#总结","aria-label":'Permalink to "总结"'},"​")],-1),O=s("p",null,"本课时首先介绍了 Skywalking OAP 服务的整体框架，OAP 与 Agent 类似，也是微内核+插件的架构，主要围绕 Module、 ModuleProvider、Service 等核心概念展开。然后介绍了 SkyWalking OAP 服务的启动流程，其中涉及 ModuleDefine、ModuleProvider 等核心组件的准备流程和初始化流程。",-1);function w(L,I,x,R,V,H){const a=p("Image");return h(),t("div",null,[r,d,o,E,n(a,{alt:"image.png",src:"https://s0.lgstatic.com/i/image/M00/08/09/CgqCHl66RCiAJ3mTAAHxQQrh8Cg825.png"}),i(),g,y,c,u,n(a,{alt:"image (1).png",src:"https://s0.lgstatic.com/i/image/M00/08/0A/Ciqc1F66RO-ANDsBAADxvp0EW2Q875.png"}),i(),A,n(a,{alt:"image (2).png",src:"https://s0.lgstatic.com/i/image/M00/08/0B/Ciqc1F66RQuAKLYRAAB7aXtA8Vc434.png"}),i(),F,M,v,n(a,{alt:"ModuleDefine继承图.png",src:"https://s0.lgstatic.com/i/image/M00/08/0B/CgqCHl66RRSAMwsQAACTJig2rOc013.png"}),i(),C,n(a,{alt:"image (3).png",src:"https://s0.lgstatic.com/i/image/M00/08/0B/CgqCHl66RSyAasXnAAxKC1wvreU269.png"}),i(),D,n(a,{alt:"image (4).png",src:"https://s0.lgstatic.com/i/image/M00/08/0B/Ciqc1F66RTOAc7l_AAGhZ9L9Cqc865.png"}),i(),P,n(a,{alt:"CoreModuleProvider.png",src:"https://s0.lgstatic.com/i/image/M00/08/0B/Ciqc1F66RUuAOOobAADhJDK8Z_Q834.png"}),i(),m,_,n(a,{alt:"ModuleConfig.png",src:"https://s0.lgstatic.com/i/image/M00/08/0B/CgqCHl66RVSAUPzJAACewmU9Ffw912.png"}),i(),f,n(a,{alt:"image (5).png",src:"https://s0.lgstatic.com/i/image/M00/08/0B/Ciqc1F66RV-AHPCmAAuhu0QRPZ4250.png"}),i(),S,n(a,{alt:"image (6).png",src:"https://s0.lgstatic.com/i/image/M00/08/0B/Ciqc1F66RW2AVITpAABWeBaF_vg920.png"}),i(),B,n(a,{alt:"image (7).png",src:"https://s0.lgstatic.com/i/image/M00/08/0B/Ciqc1F66RXeADVj3AAD7tFRaUQw017.png"}),i(),b,n(a,{alt:"image (8).png",src:"https://s0.lgstatic.com/i/image/M00/08/0B/Ciqc1F66RX6Af8e5AABjm7z7wTQ773.png"}),i(),T,q,O])}const W=l(k,[["render",w]]);export{j as __pageData,W as default};
