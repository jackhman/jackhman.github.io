import{_ as t,F as r,g as o,K as a,h as e,l as i,ar as n,o as l}from"./chunks/framework.VlluEs-f.js";const V=JSON.parse('{"title":"第20讲：深入剖析Configuration插件，实现可插拔接入多种配置中心","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1738) 第20讲：深入剖析 Configuration 插件，实现可插拔接入多种配置中心.md","filePath":"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1738) 第20讲：深入剖析 Configuration 插件，实现可插拔接入多种配置中心.md","lastUpdated":1718371218000}'),p={name:"posts/backEnd/098-讲带你搞懂 SkyWalking文档/(1738) 第20讲：深入剖析 Configuration 插件，实现可插拔接入多种配置中心.md"},h=i("h1",{id:"第20讲-深入剖析configuration插件-实现可插拔接入多种配置中心",tabindex:"-1"},[e("第20讲：深入剖析Configuration插件，实现可插拔接入多种配置中心 "),i("a",{class:"header-anchor",href:"#第20讲-深入剖析configuration插件-实现可插拔接入多种配置中心","aria-label":'Permalink to "第20讲：深入剖析Configuration插件，实现可插拔接入多种配置中心"'},"​")],-1),k=i("p",null,"在前面的课时中，我们深入介绍了 SkyWalking OAP 服务的核心架构和启动流程，以及 Module、ModuleProvider、Service 等核心接口的功能。SkyWalking OAP 采用了微内核 + 插件的架构，各个插件模块的开发、接入非常方便，只需实现 ModuleDefine 以及 ModuleProvider 即可，然后由微内核通过 SPI 技术扫描加载并实例化使用。",-1),g=i("p",null,"在本课时，将重点介绍 Configuration 模块的基本原理，还会分析依赖 ZooKeeper 作为配置中心的相关插件实现。",-1),d=i("h3",{id:"configuration-api-模块",tabindex:"-1"},[e("configuration-api 模块 "),i("a",{class:"header-anchor",href:"#configuration-api-模块","aria-label":'Permalink to "configuration-api 模块"'},"​")],-1),c=i("p",null,"configuration-api 模块定义了 Configuration 模块的核心功能和扩展框架，位于 server-configuration 模块之中，具体位置如下图所示：",-1),C=i("p",null,"上图可以看到，除了 configuration-api 模块之外，server-configuration 中还有支持各种配置中心的子模块，例如，configuration-zookeeper 依赖 ZooKeeper 管理配置信息，configuration-etcd 依赖 etcd 管理配置信息等。",-1),E=i("p",null,"在默认 application.yml 配置文件中可以看到 Configuration 插件模块的相关配置信息，如下图所示：",-1),_=i("p",null,"首先来看 configuration-api 模块，在其 resource 目录下有两个 SPI 配置文件，分别指定 ModuleDefine 实现类和 ModuleProvider 实现类，如下图所示：",-1),u=n("",5),y=i("p",null,'NoneConfigurationProvider 是 configuration-api 模块中提供的 ModuleProvider 实现类，也是 configuration-api 模块在 SPI 文件中指定的 ModuleProvider 实现类，其 name() 方法返回的 ModuleProvider 名称为 "none"，其余方法都是空实现。',-1),f=i("p",null,"所以，按照 application.yml 的默认配置，OAP 使用的就是 NoneConfigurationProvider，在 OAP 服务启动之后，没有任何监听配置修改的能力。",-1),A=i("h3",{id:"zookeeper-基础速读",tabindex:"-1"},[e("Zookeeper 基础速读 "),i("a",{class:"header-anchor",href:"#zookeeper-基础速读","aria-label":'Permalink to "Zookeeper 基础速读"'},"​")],-1),F=i("p",null,"在开始分析 configuration-zookeeper 模块之前，我们需要先了解一些 ZooKeeper 的基础知识。Apache ZooKeeper 是一个针对分布式系统的、可靠的、可扩展的协调服务，通常作为统一命名服务、统一配置管理、分布式集群管理（注册中心）、分布式锁服务、Leader 选举服务等角色出现。",-1),m=i("h4",{id:"基本概念",tabindex:"-1"},[e("基本概念 "),i("a",{class:"header-anchor",href:"#基本概念","aria-label":'Permalink to "基本概念"'},"​")],-1),v=i("p",null,"ZooKeeper 本身也是一个分布式应用程序，下图展示了 ZooKeeper 集群的核心架构。",-1),Z=i("ul",null,[i("li",null,[i("strong",null,"Client"),e("：分布式应用中的一个节点，通过 ZkClient 或是其他 ZooKeeper 客户端与 ZooKeeper 集群中的一个 Server 实例维持长连接，并定时发送心跳。Client 可以主动查询或操作 ZooKeeper 集群中的数据，也可以在某些 ZooKeeper 节点上添加监听，当被监听的节点发生变化时，会通过长连接通知 Client。")]),i("li",null,[i("strong",null,"Leader 节点"),e("：负责整个 ZooKeeper 集群的写操作，保证集群内事务处理的顺序性。同时，还要负责整个集群中所有 Follower 节点与 Observer 节点的数据同步。")]),i("li",null,[i("strong",null,"Follower 节点"),e("：用于接收 Client 读请求并向 Client 返回结果。Follower 节点并不处理写请求，而是转发到 Leader 节点完成写入操作。Follower 节点还会参与 Leader 节点的选举。")]),i("li",null,[i("strong",null,"Observer"),e("：Observer 节点不会参与 Leader 节点的选举，其他功能与 Follower 节点相同。引入Observer 角色的目的是增加 ZooKeeper 集群读操作的吞吐量，如果单纯依靠增加 Follower 节点，那么 ZooKeeper 集群的写能力会大大降低，因为 ZooKeeper 写数据时需要Leader 将写操作同步给半数以上的 Follower 节点。引入 Observer 节点使得 ZooKeeper 集群在写能力不降低的情况下，大大提升了读操作的吞吐量。")])],-1),D=i("p",null,'下图展示了 ZooKeeper 树型的存储结构。ZooKeeper 节点称为 ZNode 。每个 ZNode 有一个名称标识，并用 "/" 分隔，这与文件系统的目录树一样。ZooKeeper 树中的每个节点可以拥有子节点。',-1),P=n("",3),K=n("",7),b=n("",18),W=i("p",null,"在下一课时介绍 configuration-zookeeper 模块实现时，就会使用到 Apache Curator 的相关内容。",-1),S=i("h3",{id:"基于-zookeeper-的配置管理",tabindex:"-1"},[e("基于 ZooKeeper 的配置管理 "),i("a",{class:"header-anchor",href:"#基于-zookeeper-的配置管理","aria-label":'Permalink to "基于 ZooKeeper 的配置管理"'},"​")],-1),T=i("p",null,"虽然 configuration-api 模块提供的 NoneConfigurationProvider 没有监听配置变更的能力，但却定义了 ConfigWatcherRegister 以及 AbstractConfigurationProvider 两个抽象类，方便依赖其他配置中心的模块进行扩展。",-1),L=i("p",null,"ConfigWatcherRegister 继承了DynamicConfigurationService 接口，如下图所示，依赖 ZooKeeper、Nacos 等配置中心的实现都继承了该抽象类。",-1),w=n("",6),x=n("",9);function B(M,R,I,N,z,q){const s=r("Image");return l(),o("div",null,[h,k,g,d,c,a(s,{alt:"image.png",src:"https://s0.lgstatic.com/i/image/M00/09/D7/CgqCHl688siAJ017AABzT6xvdZs551.png"}),e(),C,E,a(s,{alt:"image (1).png",src:"https://s0.lgstatic.com/i/image/M00/09/D7/CgqCHl688tKAUWu8AApG54vhCNQ135.png"}),e(),_,a(s,{alt:"image (2).png",src:"https://s0.lgstatic.com/i/image/M00/09/D7/CgqCHl688tuAWXXyAAIN0mNeddY662.png"}),e(),u,a(s,{alt:"image (3).png",src:"https://s0.lgstatic.com/i/image/M00/09/D7/CgqCHl688viAJ8OZAABFqb4k60Q765.png"}),e(),y,f,A,F,m,v,a(s,{alt:"image (4).png",src:"https://s0.lgstatic.com/i/image/M00/09/D7/CgqCHl688u-AVrZ3AAHsBQjob44191.png"}),e(),Z,D,a(s,{alt:"image (5).png",src:"https://s0.lgstatic.com/i/image/M00/09/D7/Ciqc1F688wqAJsJtAAHIFtKaGSg850.png"}),e(),P,a(s,{alt:"image (6).png",src:"https://s0.lgstatic.com/i/image/M00/09/D8/Ciqc1F688xKAHcQCAAU-W9Rr--g899.png"}),e(),K,a(s,{alt:"image (7).png",src:"https://s0.lgstatic.com/i/image/M00/09/D8/CgqCHl688x6Ab-hWAAPUPfOGKLE909.png"}),e(),b,a(s,{alt:"sw.png",src:"https://s0.lgstatic.com/i/image/M00/09/D8/CgqCHl6888eAY4NZAADf6Jd0NXg990.png"}),e(),W,S,T,L,a(s,{alt:"ConfigWatcherRegister.png",src:"https://s0.lgstatic.com/i/image/M00/09/D8/Ciqc1F688y-AT0Y0AAGEZhYxBWc264.png"}),e(),w,a(s,{alt:"AbstractConfigurationProvider继承关系.png",src:"https://s0.lgstatic.com/i/image/M00/09/D8/Ciqc1F688zqAE5J_AAGK-TTe0o8616.png"}),e(),x])}const H=t(p,[["render",B]]);export{V as __pageData,H as default};
