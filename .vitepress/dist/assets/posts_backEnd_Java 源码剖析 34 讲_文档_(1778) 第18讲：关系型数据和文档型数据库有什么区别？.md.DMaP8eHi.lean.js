import{_ as n,F as e,g as l,K as o,h as s,ar as i,l as a,o as p}from"./chunks/framework.VlluEs-f.js";const S=JSON.parse('{"title":"第18讲：关系型数据和文档型数据库有什么区别？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Java 源码剖析 34 讲_文档/(1778) 第18讲：关系型数据和文档型数据库有什么区别？.md","filePath":"posts/backEnd/Java 源码剖析 34 讲_文档/(1778) 第18讲：关系型数据和文档型数据库有什么区别？.md","lastUpdated":1718371218000}'),r={name:"posts/backEnd/Java 源码剖析 34 讲_文档/(1778) 第18讲：关系型数据和文档型数据库有什么区别？.md"},h=i("",10),g=a("p",null,[a("strong",null,"第二范式（The Second Normal Form，2NF）"),s("：例如订单详情表有这些字段：订单 ID、产品 ID、产品名称、产品单价、折扣。其中，订单 ID 和产品 ID 为联合主键，但这个表中的产品名称和产品单价两个字段只依赖产品 ID，和订单 ID 就没有任何关系了，因此这个表也不符合第二范式。")],-1),d=a("p",null,"我们可以把原来的订单表拆分为订单表和产品表，其中订单表包含：订单 ID、产品 ID、折扣等字段；而产品表包含：产品 ID、产品名称、产品单价等字段。这样就消除了产品名称和产品单价多次重复出现的情况了，从而避免了冗余数据的产生。",-1),c=a("p",null,[a("strong",null,"第三范式（The Third Normal Form，3NF）"),s("：想要满足第三范式必须先满足第二范式，第三范式要求所有的非主键字段必须直接依赖主键，且不存在传递依赖的情况。")],-1),_=a("p",null,"例如，有一个学生表中包含了：学生 ID、姓名、所在学院 ID、学院电话、学院地址等字段。这个表的所有字段（除去主键字段）都完全依赖唯一的主键字段（学生 ID），所以符合第二范式。但它存在一个问题，学院电话、学院地址依赖非主键字段学院 ID，而不是直接依赖于主键，它是通过传递才依赖于主键，所以不符合第三范式。",-1),k=a("p",null,"我们可以把学生表分为两张表，一张是学生表包含了：学生 ID、姓名、所在学院 ID 等字段；另一张为学院表包含了：学院 ID、学院电话、学院地址等字段，这样就满足第三范式的要求了。",-1),D=i("",32);function u(E,m,B,F,q,M){const t=e("Image");return p(),l("div",null,[h,o(t,{alt:"image (9).png",src:"https://s0.lgstatic.com/i/image/M00/04/EE/Ciqc1F609LGAVe-VAACjotekkQg824.png"}),s(),g,d,o(t,{alt:"image (10).png",src:"https://s0.lgstatic.com/i/image/M00/04/EE/CgqCHl609MKAFYSYAADJf5bDe60684.png"}),s(),c,_,k,o(t,{alt:"image (11).png",src:"https://s0.lgstatic.com/i/image/M00/04/EE/Ciqc1F609NeAe9auAADiqrkjytE051.png"}),s(),D])}const b=n(r,[["render",u]]);export{S as __pageData,b as default};
