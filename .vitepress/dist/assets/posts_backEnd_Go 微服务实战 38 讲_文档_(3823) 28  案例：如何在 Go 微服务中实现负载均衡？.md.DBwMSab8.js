import{_ as h,F as l,g as k,K as n,h as i,l as s,ar as t,o as p}from"./chunks/framework.VlluEs-f.js";const x=JSON.parse('{"title":"28案例：如何在Go微服务中实现负载均衡？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Go 微服务实战 38 讲_文档/(3823) 28  案例：如何在 Go 微服务中实现负载均衡？.md","filePath":"posts/backEnd/Go 微服务实战 38 讲_文档/(3823) 28  案例：如何在 Go 微服务中实现负载均衡？.md","lastUpdated":1718371218000}'),e={name:"posts/backEnd/Go 微服务实战 38 讲_文档/(3823) 28  案例：如何在 Go 微服务中实现负载均衡？.md"},E=s("h1",{id:"_28案例-如何在go微服务中实现负载均衡",tabindex:"-1"},[i("28案例：如何在Go微服务中实现负载均衡？ "),s("a",{class:"header-anchor",href:"#_28案例-如何在go微服务中实现负载均衡","aria-label":'Permalink to "28案例：如何在Go微服务中实现负载均衡？"'},"​")],-1),r=s("p",null,"在上一课时中，我们已经介绍了负载均衡的相关概念以及在服务高可用架构中的重要性，也了解了几种主流负载均衡算法的实现。在本课时中，我们将在 Go 微服务实例中具体使用负载均衡技术，并详细说明如何基于服务发现来实现负载均衡的微服务间 HTTP 调用。",-1),d=s("h3",{id:"基于服务发现和注册的负载均衡",tabindex:"-1"},[i("基于服务发现和注册的负载均衡 "),s("a",{class:"header-anchor",href:"#基于服务发现和注册的负载均衡","aria-label":'Permalink to "基于服务发现和注册的负载均衡"'},"​")],-1),g=s("p",null,"我们仍然以之前课时提到的电商商品系统为例，商品详情页面需要展示下游评论系统的具体评论信息，所以商品系统通过 HTTP 请求调用评论系统获取商品评论。下图展示了两个系统的交互情况：",-1),o=t(`<p>商品和评论系统交互示意图</p><p>评论系统单实例性能欠佳，需要多实例部署，平均请求压力；而商品系统则需要在发起请求前，从所有可用的评论系统实例中挑选一个，再发起请求。查看商品详情的外部请求数量往往在促销时增加，因此评论系统实例的数量并不是固定的，而是动态变化的，请求量大时增加服务实例，请求量少时，则减少服务实例。</p><p>所以，<strong>商品系统的负载均衡机制需要基于服务注册与发现机制</strong>，动态获取评论系统的可用实例列表，而不是将其固化在代码或者配置文件中。</p><p>下面，我们就来具体看一下如何在商品系统项目中实现负载均衡。本课时的相关代码在课程代码库中的 section28 文件夹下，地址为<a href="https://github.com/longjoy/micro-go-course" target="_blank" rel="noreferrer">https://github.com/longjoy/micro-go-course</a>。</p><h3 id="服务初始化" tabindex="-1">服务初始化 <a class="header-anchor" href="#服务初始化" aria-label="Permalink to &quot;服务初始化&quot;">​</a></h3><p>首先，我们需要使用前面 <a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=287#/detail/pc?id=3812" target="_blank" rel="noreferrer">14 课时</a>讲解的基于 Consul 的负载均衡客户端（若是记不太清了，你可以回过头再温故一下）。下面代码展示了商品系统在启动时的初始化过程：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 传入consul的地址和端口初始化服务注册和发现客户端</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> discovery.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NewDiscoveryClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">consulAddr, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">consulPort)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用uuid生成客户端实例ID</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">instanceId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">serviceName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;-&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uuid.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">New</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将实例自己注册到 consul 上，包括服务名称，实例ID，健康检查地址，host和端口等</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">serviceName, instanceId, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/health&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">serviceAddr, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">servicePort, nil, nil)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 初始化负载均衡器，可以初始化携带不同负载均衡策略的负载均衡器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">loadbalancer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> loadbalancer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NewRandomLoadBalancer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用服务注册与发现客户端和负载均衡器初始化service</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">srv </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> service.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NewGoodsServiceImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(client, loadbalancer)</span></span></code></pre></div><p>其中，<strong>loadbalancer</strong> 是本课时的重点，它<strong>是定义负载均衡策略的接口</strong>，只有一个 SelectService 方法，接受 ServiceInstance 也就是可用服务列表作为参数，根据一定负载均衡策略从服务实例列表中选择一个服务实例返回。而可用服务列表则可以通过服务注册和发现客户端从 Consul 等服务注册和发现中心获取。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 负载均衡器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">type LoadBalance interface {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 基于可用服务列表的负载均衡接口</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SelectService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(service []common.ServiceInstance) (common.Service Instance, error)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 基于可用服务列表和键值辅助的负载均衡接口</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SelectServiceByKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(service []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">discovery.InstanceInfo, key string) (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">discovery.InstanceInfo, error)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">​</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>具体的负载均衡器都要实现该接口，并给出具体不同负载均衡策略的 SelectService 方法的实现，比如上一课时中介绍的随机负载均衡策略和权重平滑负载均衡策略。</p><p>我们下面再讲解一下项目中使用的<strong>一致性负载均衡策略</strong>，根据商品 ID 将不同的获取商品评价的 HTTP 请求分发到某一个固定的评级服务实例上，这样有利于使用本地缓存等缓存机制，提高系统的性能。</p><p>一致性哈希负载均衡的核心思想是首先将服务器 key 进行 Hash 运算，将其映射到一个圆形的哈希环上，key 计算出来的整数值则为该服务实例在哈希环上的位置，然后再将请求的 key 值，用同样的方法计算出哈希环上的位置，按顺时针方向，找到第一个大于或等于该哈希环位置的服务实例 key，从而得到本次请求需要分配的服务实例。</p>`,12),y=t(`<p>一致性哈希负载均衡示意图</p><p>如上图所示，服务实例 node1~4 都计算出 Hash 值并映射到哈希环上，而请求的 key 值也能计算出 Hash 值并映射到环上，如图右侧的键值，然后按照顺时针方向找到了服务实例 node2，则该请求就被负载转发到服务实例上。</p><p>一致性哈希负载均衡策略能够很好地应对服务实例上线或者下线的场景，以防止大量请求被负载转发到不同的服务实例，减少其对整体系统带来的影响，而一般的哈希负载均衡策略就很难满足这点。比如说服务实例 node2 突然宕机下线，按照该算法，只有 Hash 值落在在服务实例 node1 和 node2 之间的请求受到了影响，被负载转发到了服务实例 node4 上，其他的大部分请求不受影响。</p><p>一致性哈希负载均衡策略的具体实现，如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">type HashLoadBalancer struct {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">​</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (loadBalance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HashLoadBalancer) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SelectServiceByKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(services []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">discovery.InstanceInfo, key string) (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">discovery.InstanceInfo, error) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 检查可用服务实例列表不为空</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lens </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(services)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> services </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nil </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lens </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nil, errors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">New</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;service instances are not exist&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用crc32将key值算出hash值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">crcTable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> crc32.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MakeTable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(crc32.IEEE)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hashVal </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> crc32.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Checksum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key), crcTable)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 根据hash值和列表长度取余获得服务实例</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hashVal) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lens</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> services[index],nil</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在使用该负载均衡策略时，我们就将商品 ID 作为 key 值传递进来，该算法会使用 crc32 计算该商品 ID 对应的 Hash 值，然后根据取余结果从可用服务列表选出本次负载均衡的目标实例。</p><h3 id="发起网络请求" tabindex="-1">发起网络请求 <a class="header-anchor" href="#发起网络请求" aria-label="Permalink to &quot;发起网络请求&quot;">​</a></h3><p>商品系统服务和评论系统初始化启动好之后，对外建立 HTTP 服务，当有用户查看详情时，商品系统会向评论系统发起网络请求，具体代码如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (service </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GoodsDetailServiceImpl) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetGoodsComments</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx context.Context, id string) (common.CommentResult, error) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var result common.CommentResult</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用服务注册和发现客户端从consul中获取名为comment的可用服务实例列表</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">serviceName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;comment&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">instances, err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> service.discoveryClient.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DiscoverServices</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx, serviceName)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.... </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 省略，异常检查</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用负载均衡器根据商品id和可用服务实例列表获取本次网络调用的目标comment服务实例</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">selectedInstance, err2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> service.loadbalancer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SelectService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(instances,id)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">​</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> err2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nil {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;loadbalancer get selected instance  err: %s&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, err2)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result, ErrLoadBalancer</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">call_err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hystrix.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(serviceName, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() error {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用选中comment服务实例的信息来拼接HTTP请求</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">requestUrl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> url.URL{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Scheme</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   &quot;http&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Host</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     selectedInstance.Address </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;:&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> strconv.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Itoa</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(selectedInstance.Port),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     &quot;/comments/detail&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">RawQuery</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;id=&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">resp, err </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(requestUrl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.... </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 省略</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e error) error {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 断路器打开时的处理逻辑，本示例是直接返回错误提示</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> errors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">New</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Http errors！&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.... </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//省略</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>所以，每次发起查询商品评论信息的网络请求前，都会先调用服务注册和发现客户端的 DiscoverServices 方法来获取当前 comment 可用的服务实例列表，然后调用负载均衡器的 SelectService 方法，根据商品的 ID 从可用列表中选中一个服务实例，最后根据该服务实例的信息构建网络请求，比如 host 和 port 信息等。整个过程如下图所示：</p>`,10),c=s("p",null,"基于服务发现和注册的负载均衡示意图",-1),F=s("p",null,"以上就是在 Go 微服务中实现客户端负载均衡的主流实现原理，很多开源负载均衡器（比如，Ribbon 等）都是以这套原理实现的，不过这个过程还是有许多可以优化的细节，比如负载均衡客户端可以使用缓存可用服务列表数据等方式，来避免每次都从 Consul 处获取可用服务列表数据，以此提高效率。",-1),D=s("h3",{id:"运行展示",tabindex:"-1"},[i("运行展示 "),s("a",{class:"header-anchor",href:"#运行展示","aria-label":'Permalink to "运行展示"'},"​")],-1),m=s("p",null,"下面，我们就来具体运行和展示一下本课时的案例项目。",-1),C=s("p",null,"首先，我们启动一个商品系统服务（good）和三个评论系统服务（comment），它们都会将自己注册到服务注册和发现中心 Consul 上。如下是 Consul 相关的截图：",-1),A=s("p",null,"Consul 所有服务列表截图",-1),B=s("p",null,"我们可以从 Consul 的服务列表页面发现有三个 comment 服务实例和一个商品服务实例，这三个 comment 服务实例的具体信息如下图所示，从图中可以看出，它们的 host 信息都是127.0.0.1，但是端口号不同，你也可以将这三个 comment 服务实例部署在不同 IP 地址的服务器上，这样它们的 host 信息就不一样了。",-1),u=t(`<p>Comment 服务实例具体信息截图</p><p>接着，我们使用 postman 或者 curl 向 good 发起查看多个商品详情的网络请求，请求多次，具体命令如下所示：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">curl http</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//127.0.0.1:12313/goods/detail?id=1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">curl http</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//127.0.0.1:12313/goods/detail?id=2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">curl http</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//127.0.0.1:12313/goods/detail?id=3</span></span></code></pre></div><p>然后，我们到 good 服务实例的日志中进行查看，可以看到如下日志信息：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">get good </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> comment from comment service host</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">127.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> port </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">13312</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">get good </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> comment from comment service host</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">127.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> port </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11312</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">get good </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> comment from comment service host</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">127.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> port </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12312</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">get good </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> comment from comment service host</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">127.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> port </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">13312</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">get good </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> comment from comment service host</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">127.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> port </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11312</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">get good </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> comment from comment service host</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">127.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> port </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12312</span></span></code></pre></div><p>从日志中可以看出，不同 ID 的商品会请求不同的 comment 服务实例，并且不会改变请求的实例，这正是使用一致性哈希负载均衡策略想要得到的效果。</p><p>接下来，我们将端口号为11312的 comment 服务下线，此时就只有两个 comment 服务实例，我们再次发起上述的查询商品详情的请求，可以看到如下日志：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">get good </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> comment from comment service host</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">127.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> port </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">13312</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">get good </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> comment from comment service host</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">127.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> port </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">13312</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">get good </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> comment from comment service host</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">127.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> port </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12312</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">get good </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> comment from comment service host</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">127.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> port </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">13312</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">get good </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> comment from comment service host</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">127.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> port </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">13312</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">get good </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> comment from comment service host</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">127.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> port </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12312</span></span></code></pre></div><p>从这段日志我们可以看出：原来 ID 为 1 的商品详情会向端口为 13312 的 comment 服务实例进行请求，现在也是如此；而且 ID 为 3 的商品详情也跟原来一样，都是向端口为 12312 的服务实例进行请求，二者没有发生变化，这也是一致性哈希负载均衡策略的功效。</p><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>在本课时，我为你讲述了在 Go 微服务中使用基于服务注册和发现的负载均衡机制，通过该机制，可以很方便地为下游集群增加和删除服务实例，上游服务也可以对其进行自动适配和负载均衡。除此之外，我们还以商品详情为例，给出了 Go 微服务负载均衡机制的具体实现，向你展示了使用一致性哈希负载均衡策略将请求发送给不同评论服务实例的场景。</p><p>文中讲解的基于服务注册和发现机制的负载均衡过程还有大量可以优化的细节，你还知道哪些呢？欢迎你留言，我们一起讨论。</p>`,12);function v(_,f,b,I,S,q){const a=l("Image");return p(),k("div",null,[E,r,d,g,n(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/58/EC/Ciqc1F9wY16AQjwDAAAgwx5jOqc017.png"}),i(),o,n(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/58/F7/CgqCHl9wY26AWGaHAAB21ndPVIY647.png"}),i(),y,n(a,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/58/EC/Ciqc1F9wY4WAGxXHAABbFi54b6c310.png"}),i(),c,F,D,m,C,n(a,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/58/F7/CgqCHl9wY46AArB3AAcBgrX01wM768.png"}),i(),A,B,n(a,{alt:"Drawing 4.png",src:"https://s0.lgstatic.com/i/image/M00/58/EC/Ciqc1F9wY5mAKpcCAAz-1u-gvNc329.png"}),i(),u])}const P=h(e,[["render",v]]);export{x as __pageData,P as default};
