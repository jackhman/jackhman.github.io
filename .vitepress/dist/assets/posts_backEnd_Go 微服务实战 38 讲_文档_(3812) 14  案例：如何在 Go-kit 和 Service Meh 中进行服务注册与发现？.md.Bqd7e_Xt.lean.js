import{_ as l,F as e,g as p,K as i,h as a,ar as t,l as n,o as h}from"./chunks/framework.VlluEs-f.js";const S=JSON.parse('{"title":"14案例：如何在Go-kit和ServiceMeh中进行服务注册与发现？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Go 微服务实战 38 讲_文档/(3812) 14  案例：如何在 Go-kit 和 Service Meh 中进行服务注册与发现？.md","filePath":"posts/backEnd/Go 微服务实战 38 讲_文档/(3812) 14  案例：如何在 Go-kit 和 Service Meh 中进行服务注册与发现？.md","lastUpdated":1718371218000}'),k={name:"posts/backEnd/Go 微服务实战 38 讲_文档/(3812) 14  案例：如何在 Go-kit 和 Service Meh 中进行服务注册与发现？.md"},r=t("",22),E=n("p",null,"Istio 架构图",-1),g=n("p",null,"这其中 Proxy 属于数据平面，以 Sidecar 的方式与应用程序一同部署到 Pod 中，而 Pilot、Citadel 和 Galley 属于控制平面。除此之外，Istio 中还提供一些额外的插件，如 grafana、istio-tracing、kiali 和 prometheus，用于进行可视化的数据查看、流量监控和链路追踪等。",-1),d=n("p",null,"Istio 默认提供了以下几种安装 profile 形式，它们开启的组件配置如下表所示（+ 表示开启，空白表示未开启，- 表示未知）：",-1),o=t("",11),y=t("",4),c=n("p",null,"kiali Applications 维度下的 register",-1),F=n("p",null,"Istio 依托 Kubernetes 的快速发展和推广，对 Kubernetes 有着极强的依赖性，其服务注册与发现的实现也主要依赖于 Kubernetes 的 Service 管理。我们可以通过以下这张图理解 Istio 的服务注册与发现。",-1),C=t("",10);function u(A,v,_,D,m,b){const s=e("Image");return h(),p("div",null,[r,i(s,{alt:"image.png",src:"https://s0.lgstatic.com/i/image/M00/41/DA/CgqCHl82RMaAO4wvAARr5zliZpw337.png"}),a(),E,g,d,i(s,{alt:"图片7.png",src:"https://s0.lgstatic.com/i/image/M00/41/CE/Ciqc1F82RNKADQe4AACin_AYfxg655.png"}),a(),o,i(s,{alt:"image (1).png",src:"https://s0.lgstatic.com/i/image/M00/41/CF/Ciqc1F82RT2AaFOvAABX9ZrCcO8542.png"}),a(),y,i(s,{alt:"QQ20200813-103436.png",src:"https://s0.lgstatic.com/i/image/M00/41/DA/CgqCHl82RTKAGJclAABrWEPqyEA895.png"}),a(),c,F,i(s,{alt:"image.png",src:"https://s0.lgstatic.com/i/image/M00/41/DA/CgqCHl82RSqALb27AARr5zliZpw854.png"}),a(),C])}const I=l(k,[["render",u]]);export{S as __pageData,I as default};
