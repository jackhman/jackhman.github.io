import{_ as k,F as l,g as p,K as n,h as i,l as s,ar as h,o as t}from"./chunks/framework.VlluEs-f.js";const w=JSON.parse('{"title":"28复杂问题简单化，代理帮你隐藏了多少底层细节？","description":"","frontmatter":{},"headers":[],"relativePath":"posts/backEnd/Dubbo源码解读与实战_文档/(4275) 28  复杂问题简单化，代理帮你隐藏了多少底层细节？.md","filePath":"posts/backEnd/Dubbo源码解读与实战_文档/(4275) 28  复杂问题简单化，代理帮你隐藏了多少底层细节？.md","lastUpdated":1718371218000}'),e={name:"posts/backEnd/Dubbo源码解读与实战_文档/(4275) 28  复杂问题简单化，代理帮你隐藏了多少底层细节？.md"},E=s("h1",{id:"_28复杂问题简单化-代理帮你隐藏了多少底层细节",tabindex:"-1"},[i("28复杂问题简单化，代理帮你隐藏了多少底层细节？ "),s("a",{class:"header-anchor",href:"#_28复杂问题简单化-代理帮你隐藏了多少底层细节","aria-label":'Permalink to "28复杂问题简单化，代理帮你隐藏了多少底层细节？"'},"​")],-1),r=s("p",null,"在前面介绍 DubboProtocol 的相关实现时，我们知道 Protocol 这一层以及后面介绍的 Cluster 层暴露出来的接口都是 Dubbo 内部的一些概念，业务层无法直接使用。为了让业务逻辑能够无缝使用 Dubbo，我们就需要将业务逻辑与 Dubbo 内部概念打通，这就用到了动态生成代理对象的功能。Proxy 层在 Dubbo 架构中的位置如下所示（虽然在架构图中 Proxy 层与 Protocol 层距离很远，但 Proxy 的具体代码实现就位于 dubbo-rpc-api 模块中）：",-1),d=s("p",null,"Dubbo 架构中 Proxy 层的位置图",-1),g=s("p",null,[i("在 Consumer 进行调用的时候，Dubbo 会通过"),s("strong",null,"动态代理"),i(" 将业务接口实现对象转化为相应的 Invoker 对象，然后在 Cluster 层、Protocol 层都会使用 Invoker。在 Provider 暴露服务的时候，也会有 Invoker 对象与业务接口实现对象之间的转换，这同样也是通过"),s("strong",null,"动态代理"),i("实现的。")],-1),y=s("p",null,"实现动态代理的常见方案有：JDK 动态代理、CGLib 动态代理和 Javassist 动态代理。这些方案的应用都还是比较广泛的，例如，Hibernate 底层使用了 Javassist 和 CGLib，Spring 使用了 CGLib 和 JDK 动态代理，MyBatis 底层使用了 JDK 动态代理和 Javassist。",-1),F=s("p",null,"从性能方面看，Javassist 与 CGLib 的实现方式相差无几，两者都比 JDK 动态代理性能要高，具体高多少，这就要看具体的机器、JDK 版本、测试基准的具体实现等条件了。",-1),o=s("p",null,[s("strong",null,"Dubbo 提供了两种方式来实现代理，分别是 JDK 动态代理和 Javassist"),i("。我们可以在 proxy 这个包内，看到相应工厂类，如下图所示：")],-1),c=h("",7),A=h("",50),C=h("",16),D=s("p",null,"Proxy 和 Wrapper 远程调用简图",-1),u=s("p",null,"Consumer 端的 Proxy 底层屏蔽了复杂的网络交互、集群策略以及 Dubbo 内部的 Invoker 等概念，提供给上层使用的是业务接口。Provider 端的 Wrapper 是将个性化的业务接口实现，统一转换成 Dubbo 内部的 Invoker 接口实现。正是由于 Proxy 和 Wrapper 这两个组件的存在，Dubbo 才能实现内部接口和业务接口的无缝转换。",-1),B=s("p",null,'关于"代理"相关的内容，你若还有什么想法，欢迎你留言跟我分享。下一课时，我们会再做一个加餐，介绍 Dubbo 中支持的 HTTP 协议的相关内容。',-1);function v(m,b,x,P,I,f){const a=l("Image");return t(),p("div",null,[E,r,n(a,{alt:"Drawing 0.png",src:"https://s0.lgstatic.com/i/image/M00/63/B5/CgqCHl-WrK6Af2f9ACAFYNhhHPc051.png"}),i(),d,g,y,F,o,n(a,{alt:"Drawing 1.png",src:"https://s0.lgstatic.com/i/image/M00/63/AA/Ciqc1F-WrLqALvCWAACKW4k6bv4319.png"}),i(),c,n(a,{alt:"Drawing 2.png",src:"https://s0.lgstatic.com/i/image/M00/63/AA/Ciqc1F-WrMiAXWheAACKwcyiNxw669.png"}),i(),A,n(a,{alt:"Drawing 3.png",src:"https://s0.lgstatic.com/i/image/M00/63/B6/CgqCHl-WrSOAU0FXAABwy4VTTF4402.png"}),i(),C,n(a,{alt:"Dubbo_28的图（待替换）.png",src:"https://s0.lgstatic.com/i/image/M00/65/9D/Ciqc1F-biguAJK7LAADFmPgsdKQ193.png"}),i(),D,u,B])}const S=k(e,[["render",v]]);export{w as __pageData,S as default};
